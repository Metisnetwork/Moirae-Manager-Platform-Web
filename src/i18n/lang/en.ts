const en = {
  common: {
    search: 'Search',
    success: 'Successful',
    edit: "Edit",
    preservation: "Submit",
    submit: "Submit",
    cancel: "Cancel",
    delete: "Delete",
    actions: 'Actions',
    num: 'No.',
    next: "Next",
    add: "Add",
    data: "Data",
    previous: "Previous",
    saveAndReturn: "Save And Return",
    cpu: "CPU",
    memory: "Memory",
    bandwidth: "Bandwidth",
    cores: "Cores",
    minute: 'minute',
    hours: 'hours',
    second: 'second',
    copy: "Copy",
    payment: "Pay",
    continuePayment: "Continue Pay",
    viewResults: "View results",
    startUp: "StartUp",
    address: "Address",
    day: "D",
    month: "M",
    year: "Y",
    all: "all",
    computations: 'computations',
    partyInfo: 'Participant Information',
    taskRole: 'Task role',
    identityId: 'IdentityID',
    info: 'Info',
    name: 'Name',
    credentialPrice: 'Credential Price',
    purchase: 'Purchase',
    algorithm: 'Algorithm',
    view: "View",
    save: 'Save',
    viewEvent: 'View Event',
    noData: "No Data",
    confirm: 'Confirm',
    viewOnScan: 'View on PlatScan',
    to: "to",
    endTime: "End Time",
    timeFrame: "time Frame"
  },
  menu: {
    home: 'Home',
    nodes: 'Nodes',
    nodesDetail: 'Nodes Details',
    marketplace: 'Marketplace',
    marketplaceDetails: 'Marketplace Details',
    computing: 'Computing Services',
    computeTaskDetails: 'Computing Task Details',
    createTask: "Create Workflow",
    data: "My Data",
    dataDetails: "Data Details",
    dataCredentials: "Data Credentials",
    workflow: "My Workflow",
    workflowDetails: "Workflow Details",
    taskDetails: "Tasks Details",
    models: "My Models",
    computeTask: "Computing Tasks",
    myAuthorization: 'My Authorization'
  },
  head: {
    myAccountTitle: 'My Account',
    connect: 'Connect Moirae',
    login: 'Log In RosettaFlow',
    logout: 'Log Out',
    myAccount: 'My Account',
    editNickname: 'Modify Nickname',
    nickname: "Nickname",
    nodeManagement: 'Node Management',
    loginDialogTitle: "Metamask Extension",
    install: "install",
    installTipOne: 'One-click blockchain application',
    installTipTwo: 'Privacy Preserved Locally',
  },
  home: {
    dataOverview: 'Data Overview',
    privacyComputations: 'Privacy Computations',
    participatingAddresses: 'Participating Addresses',
    activeAddresses: '24h Active Addresses',
    aIModels: 'AI Models',
    modelCredentials: 'Model Credentials',
    modelCredUse: 'Model Cred. Use',
    dataAmount: 'Data Amount',
    dataCredentials: 'Data Credentials',
    dataCredUse: 'Data Cred. Use',
    globalPowerAndRank: 'Computing Power Overview & Ranking',
    totalCpu: 'Total CPU',
    totalMemory: 'Total Memory',
    totalBandwidth: 'Total Bandwidth',
    nodeName: 'Node name',
    powerRatio: 'Power Ratio',
    ranking: 'Ranking',
    viewAllNode: 'View All Nodes',
    viewAllToken: 'View All Tokens',
    dataUseTop10: 'Data Credential Use TOP10',
    modelUseTop10: 'Model Credential Use TOP10',
    explorer: 'Explorer',
    viewAllComputingTask: 'View all computing tasks',
    usage: 'Usage',
    explorerHint: 'Enter task ID or organization ID'
  },
  account: {
    walletAddress: 'Wallet Address',
    viewExplorer: 'View Explorer',
    copyStatusSuccess: 'Copy Succeeded',
    copyStatusFailed: 'Copy Failed',
    nickPlaceholder: 'Please enter a nickname',
    nickValidateTips: 'The length is between 3 and 20 characters',
    tips: "Tips",
    tipsText: "Delete node"
  },
  node: {
    nodeName: 'Node name',
    nodePort: 'Node Port',
    nodeIP: 'Node IP',
    addNode: "Add Node",
    view: 'View',
    credentials: 'Credentials',
    computations: 'Computations',
    totalCpu: 'Total CPU',
    totalMemory: 'Total Memory',
    totalBandwidth: 'Total Bandwidth',
    capabilityInTask: 'Capability',
    startTime: 'Start Time',
    address: "Address",
    placeholder: "Search node ID, name keyword",
    sortBy: "Sort By"
  },
  task: {
    goTo: "Go To ",
    createTaskBriefInfo: "Create new Workflow you need",
    expertMode: "Expert Mode",
    wizardMode: "Wizard Mode",
    step: "Step",
    selectionAlg: "Select algorithm",
    selectTrainingInputData: "Select Training Input Data  ",
    selectPSIInputData: "Select PSI Input Data  ",
    selectForecastInputData: "Select Forecast Input Data",
    selectComputingEnvironment: "Select Computing Environment",
    selectResultReceiver: "Select Result Receiver",
    modeIntroductionTips: "Expert mode is suitable for developers who are familiar with AI algorithms, and supports a series of complex operations such as hyperparameter modification of AI algorithms.",
    taskName: "Workflow Name",
    pleaseEnter: "Please Enter",
    taskNameRules: "Naming rules",
    taskNameRulesOne: "cannot be modified after submitting",
    taskNameRulesTwo: "no limit to character type",
    taskNameRulesThree: " 8 characters at least",
    taskNameRulesFour: "64 characters at most",
    stepOneSelectComputingTitle: "Select the category of the privacy computing",
    Statistics: "Statistics",
    AiComputing: "AI computing",
    stepOneSelectAlgorithmTitle: "Select the algorithm",
    stepOneSelectAIAlgorithmTitle: "Select the AI algorithm",
    stepOneSelectProcedureTitle: "Select the task procedure",
    procedureTrain: "Train",
    procedurePredict: "Predict",
    procedureAll: "Train and then predict",
    selection: "Selection",
    selectSponsor: "Select the sponsor",
    importFields: "Import fields",
    field: "Field",
    fieldTips: "Select and assign the fields used in your task",
    selectField: "Select",
    setTo: "Set to",
    idColumn: "ID column",
    label: "Label",
    feature: "Feature",
    selectData: "Data",
    select: "Select",
    selectModel: "Select the model",
    environmentTraining: "Select the environment of the training task",
    environmentPrediction: "Select the environment of the prediction task",
    lowestNeed: "Lowest computing power need",
    longestTime: "Longest computing time",
    trainingResultReceivers: "Select result receivers of the training task",
    predictionResultReceivers: "Select result receivers of the prediction task",
    startTask: "Start Task",
    PSI: "Enable data alignment",
    pleaseComments: "Please enter comments (optional)",
    repeatAlgo: 'Duplicate algorithm nodes',
    exceedMaxNode: "Maximum number of nodes exceeded",
    reselectLater: "Please delete first and reselect later",
    pleaseCompleteStep: "Please complete the current step information",
    idColumnTips: "Used for multi-party data sample alignment",
    labelTips: "In supervised learning, the relationship between feature (x) and actual label (y) is found to predict y when x is provided.",
    featureTips: "In supervised learning, the relationship between feature (x) and actual label (y) is found to predict y when x is provided.",
    resultReceiverTips: "The result receiver is a trusted node used to store the calculation result file, and the node can provide users with the function of viewing / downloading the results later."
  },
  myData: {
    tasksBriefInfoFirstParagraph: " ",
    tasksBriefInfoTwoParagraph: "effective data",
    dataName: "Data Name",
    dataProvider: "Data Provider",
    credentialName: "Credential Name",
    price: "Price",
    Trading: "15Day TradingVolume(LAT)",
    purchase: "Purchase",
    viewData: "View Data",
    viewCredential: "View Credential",
    basicInfo: "Basic Information",
    metadata: "Metadata",
    tasksInvolved: "Tasks Involved",
    credentialSymbol: "Credential symbol",
    launchTime: "Launch time",
    industryData: "Industry of data",
    dataFormat: "Data format",
    dataSize: "Data size",
    rowsData: "Rows of data",
    columnsData: "Columns of data",
    dataDescription: "Data description",
    field: "Field",
    dataType: "Data Type",
    remarks: "Remarks",
    taskID: "Task ID",
    TaskCategory: "Task Category",
    capability: "Capability",
    createTime: "Create Time",
    totalTime: "Total Time",
    marketPlaceholder: "Search token, data keywords",
    priceAsc: 'Price ascending ',
    priceDesc: 'Price descending'
  },
  workflow: {
    workflowName: "Workflow Name",
    workflowAlgorithm: "Workflow Algorithm",
    workflowSteps: "Workflow Steps",
    latestRunningTime: "Latest Running Time",
    creationTime: "Creation Time",
    viewRecords: "View Records",
    continueEditing: "Continue Edit",
    deleteWorkflow: "Delete",
    deleteWorkflowTips: "Please confirm whether to delete the workflow",
    // totalOf: " ",
    // workTipsBriefInfoTwoParagraph: "privacy computing workflows",
    // recordWorkflow: "Record of this workflow",
    operationRecord: "Operation Record",
    dataNotPerfect: "The current data is not perfect",
    WorkflowVersionName: "workflow Version Name",
    state: "state",
    timeUse: "Time Use",
    viewDetails: "View Details",
    tokenNum: '剩余',
    authorizeBalance: 'Authorized quantity',
    placeholder: "Search workflow ID, name keyword",
    taskSteps: "Task Steps",
    viewTaskResults: "View Task Results"
  },
  credentials: {
    circulation: "Circulation",
    numberHolders: "Number of Holders",
    viewExplorer: "View on the blockchain explorer",
    presentPrice: "Present price",
    priceTrend: "Price Trend",
    volumeTrend: "Volume Trend",
    credentialExchangePool: "Credential Exchange Pool",
    total: 'Total',
    myShare: "My share"
  },
  computing: {
    privacyStatistics: "Privacy Statistics",
    privacyAIComputing: "Privacy AI Computing",
    privacyComputing: "Privacy Computing",
    nonPrivacyComputing: "Non-Privacy Computing"
  },
  computeTask: {
    taskId: "Task ID",
    taskCategory: "Task Category",
    startTime: "Start Time",
    totalTime: "Total Time",
    tasksBriefInfoTwoParagraph: "records of the privacy computing tasks",
    taskEvents: "Task Events",
    taskStartTime: "Task start time",
    computingStartTime: "Computing start time",
    taskEndTime: "Task end time",
    taskResult: "Task result",
    declaredComputingPowerRequired: "Declared computing power required",
    capacity: "Capacity",
    name: "Name",
    identifier: "Identifier",
    information: "Information",
    eventType: "Event type",
    eventMaker: "Event maker",
    generationTime: "Generation time",
    eventContent: "Event content",
    taskStatus: 'Task Status',
  },
  expert: {
    overview: 'Overview',
    input: 'Input',
    output: 'Output',
    code: 'Code',
    environment: 'Environment',
    inputNameTips: 'Enter the workflow name',
    cannotModify: 'cannot be modified after submitting',
    noLimitType: 'no limit to character type',
    leastCharacter: '8 characters at least',
    mostCharacter: '64 characters at most',
    overviewTipForPanel: 'Please set the task name first, and then select the algorithm from the "Algorithm Library" on the left according to the running order.',
    author: 'Author',
    supportNum: 'Supported Data Collaborators',
    supportLang: 'Programming Languages',
    setAlgoEnv: 'Configure the algorithm environment:',
    minimumResource: 'Minimum computing resource requirements',
    longestComputingTime: 'Longest computing time',
    configureOutput: "Configure the algorithm output :",
    configureInput: "Configure the algorithm input :",
    saveNotes: 'Saved to the data initiator by default',
    storageForm: 'Storage Form',
    plaintext: 'Plaintext',
    model: 'Model',
    selectModel: 'Select Model',
    viewResult: 'View Results',
    psiHint: 'If checked, the PSI operation will be performed before the current task is executed',
    labelRequired: 'labels（required)',
    labelOptionals: 'labels（optional)',
    deleteNode: 'Delete the node',
    algoVariable: 'Algorithm Variable',
    algoCode: 'Algorithm Code',
    frontModel: 'Front node output model',
    exceedPsiLimit: 'Number of PSI nodes exceeded'
  },
  role: {
    taskSponsor: 'Task sponsor',
    algoProvider: 'Algorithm provider',
    resultConsumer: 'Result consumer',
    resultReceiver: 'Result consumer',
    dataProvider: 'Data provider',
    powerProvider: 'Power provider'
  },
  auth: {
    tokenAuth: 'Certificate Authorization',
    nodeAuth: 'Node authorization',
    holdQuantity: "Hold Quantity",
    authQuantity: "Auth Quantity",
    authorizedQuantity: 'Authorized quantity',
    auth: "Authorize",
    cancelAuth: "Revoke",
    networkIP: "Network IP",
    networkName: "Network Name",
    quantityError: "The current quantity is incorrect",
    feeToken: "Fee Token",
    dataToken: "Data Token",
    plzInputAuthTokenNumber: 'Set authorized quantity',
    cancelTokenAuth: 'Cancel credential authorization',
    authStatus: 'Status',
    authorized: 'Authorized',
    unauthorized: 'Unauthorized',
    authorizeNode: 'Authorization node',
    cancelNodeAuth: 'Cancel node authorization',
    transactionReceipt: 'Transaction Receipt',
    transactionReject: 'Transaction Reject',
    authorizeToken: 'Authorize token',
    exceedTotal: 'Authorized amount exceeds holding amount',
    waitForConfirm: 'Waiting For Confirmation',
    waitWalletConfirm: 'Confirm this transaction in your wallet',
    confirmAuth: 'Confirm authorization',
    confirmCancelAuth: 'Confirm cancel authorization',
  },
  industry: {
    bank: 'Finance (bank)',
    insurance: 'Finance (Insurance)',
    securities: 'Finance (securities)',
    other: 'Finance (other)',
    iCT: "ICT",
    manufacturing: "Manufacturing",
    energy: "Energy industry",
    transportation: "Transportation Industry",
    medical: "Medical And Health Industry",
    publicService: "Public Service Industry",
    mediaAdvertise: "Media Advertising Industry",
    otherIndustry: "Other Industry",
  },
  status: {
    failed: 'failed',
    pending: 'pending',
    running: 'running',
    succeed: 'succeed',
  }
}

export default en
