const en = {
  common: {
    search: 'Search',
    success: 'Successful',
    edit: "Edit",
    preservation: "Submit",
    submit: "Submit",
    cancel: "Cancel",
    delete: "Delete",
    actions: 'Actions',
    num: 'No.',
    next: "Next",
    add: "Add",
    data: "Data",
    previous: "Previous",
    saveAndReturn: "Save And Return",
    cpu: "CPU",
    memory: "Memory",
    bandwidth: "Bandwidth",
    cores: "Cores",
    minute: 'minute',
    hours: 'hours',
    second: 'second',
    copy: "Copy",
    payment: "Pay",
    continuePayment: "Continue Pay",
    viewResults: "View results",
    startUp: "StartUp",
    address: "Address",
    day: "D",
    month: "M",
    year: "Y",
    all: "all",
    computations: 'computations',
    partyInfo: 'Participant Information',
    taskRole: 'Task role',
    identityId: 'IdentityID',
    info: 'Info',
    name: 'Name',
    credentialPrice: 'Credential Price',
    purchase: 'Purchase',
    algorithm: 'Algorithm',
    view: "View",
    save: 'Save',
    viewEvent: 'View Event',
    noData: "No Data",
    confirm: 'Confirm',
    viewOnScan: 'View on PlatScan',
    to: "to",
    endTime: "End Time",
    timeFrame: "time Frame",
    reset: "Reset",
    computeTimes: "Compute times",
    create: 'Create',
    enterNumber: "please enter a positive integer",
    attributeCredential: "Attribute Credential",
    noAttributeCredential: "No Attribute Credential",
    credentialId: "Credential ID",
    period: "Period",
    buyCredential: "Purchase Credential",
    algorithmLibrary: "Algorithm Library",
    privacy: 'Privacy',
    nonPrivacy: 'NonPrivacy',
    expireTime: 'Expire',
    times: 'Times',
    balance: 'Balance',
  },
  menu: {
    home: 'Home',
    nodes: 'Nodes',
    nodesDetail: 'Nodes Details',
    marketplace: 'Marketplace',
    marketplaceDetails: 'Marketplace Details',
    computing: 'Computing Services',
    computeTaskDetails: 'Computing Task Details',
    createTask: "Create Workflow",
    data: "My Data",
    dataDetails: "Data Details",
    dataCredentials: "Data Credentials",
    workflow: "My Workflow",
    workflowDetails: "Workflow Details",
    taskDetails: "Tasks Details",
    models: "My Models",
    computeTask: "Computing Tasks",
    myAuthorization: 'My Authorization',
    workflowVersion: 'Workflow Version Record',
    workflowSubTask: 'Workflow Subtask',
    AlgoService: 'Algorithm Service',
    publicityCenter: 'Service Announcement'
  },
  head: {
    myAccountTitle: 'My Account',
    connect: 'Connect Datum',
    login: 'Log In RosettaFlow',
    logout: 'Log Out',
    myAccount: 'My Account',
    editNickname: 'Modify Nickname',
    nickname: "Nickname",
    nodeManagement: 'Node Management',
    loginDialogTitle: "Select Login Wallet",
    install: "install",
    installTipOne: 'One-click blockchain application',
    installTipTwo: 'Privacy Preserved Locally',
  },
  home: {
    dataOverview: 'Data Overview',
    computations: 'Computations',
    participatingAddresses: 'Participating Addresses',
    activeAddresses: '24h Active Addresses',
    aIModels: 'AI Models',
    modelCredentials: 'Model Credentials',
    modelCredUse: 'Model Cred. Use',
    dataAmount: 'Data Amount',
    dataCredentials: 'Number of data',
    dataUsageTimes: 'Data Usage Times',
    globalPowerAndRank: 'Computing Power Overview & Ranking',
    totalCpu: 'Total CPU',
    totalMemory: 'Total Memory',
    totalBandwidth: 'Total Bandwidth',
    nodeName: 'Node name',
    powerRatio: 'Power Ratio',
    ranking: 'Ranking',
    viewAllNode: 'View All Nodes',
    viewAllToken: 'View All Tokens',
    dataUseTop10: 'Data Use TOP10',
    modelUseTop10: 'Model Credential Use TOP10',
    explorer: 'Explorer',
    viewAllComputingTask: 'View all computing tasks',
    usage: 'Usage',
    explorerHint: 'Enter Data Name / Task ID / Organization ID',
    dayTrend: "15 day privacy computing trend"
  },
  account: {
    walletAddress: 'Wallet Address',
    viewExplorer: 'View Explorer',
    copyStatusSuccess: 'Copy Succeeded',
    copyStatusFailed: 'Copy Failed',
    nickPlaceholder: 'Please enter a nickname',
    nickValidateTips: 'The length is between 3 and 20 characters',
    tips: "Tips",
    tipsText: "Delete node"
  },
  node: {
    nodeName: 'Node name',
    nodePort: 'Node Port',
    nodeIP: 'Node IP',
    addNode: "Add Node",
    view: 'View',
    credentials: 'Credentials',
    computations: 'Computations',
    totalCpu: 'Total CPU',
    totalMemory: 'Total Memory',
    totalBandwidth: 'Total Bandwidth',
    capabilityInTask: 'Capability',
    startTime: 'Start Time',
    address: "Address",
    placeholder: "Search node ID, name keyword",
    sortBy: "Sort By",
    viewTask: "View Task",
    credibleOrganization: 'Credible Node',
    committee: "Committee Members"
  },
  task: {
    goTo: "Switch to the ",
    createTaskBriefInfo: "Create new Workflow you need",
    expertMode: "Expert Mode",
    wizardMode: "Wizard Mode",
    step: "Step",
    selectionAlg: "Select algorithm",
    selectTrainingInputData: "Select Training Input Data  ",
    selectPSIInputData: "Select PSI Input Data  ",
    selectForecastInputData: "Select Forecast Input Data",
    selectComputingEnvironment: "Select Computing Environment",
    selectResultReceiver: "Select Result Receiver",
    modeIntroductionTips: "Expert mode is suitable for developers who are familiar with AI algorithms, and supports a series of complex operations such as hyperparameter modification of AI algorithms.",
    taskName: "Workflow Name",
    pleaseEnter: "Please Enter",
    taskNameRules: "Naming rules",
    taskNameRulesOne: "cannot be modified after submitting",
    taskNameRulesTwo: "no limit to character type",
    taskNameRulesThree: " 8 characters at least",
    taskNameRulesFour: "64 characters at most",
    stepOneSelectComputingTitle: "Select the category of the privacy computing",
    Statistics: "Statistics",
    AiComputing: "AI computing",
    stepOneSelectAlgorithmTitle: "Select the algorithm",
    stepOneSelectAIAlgorithmTitle: "Select the AI algorithm",
    stepOneSelectProcedureTitle: "Select the task procedure",
    procedureTrain: "Train",
    procedurePredict: "Predict",
    procedureAll: "Train and then predict",
    selection: "Selection",
    selectSponsor: "Select task initiator",
    importFields: "Import fields",
    field: "Field",
    fieldTips: "Select and assign the fields used in your task",
    selectField: "Select",
    setTo: "Set to",
    idColumn: "ID column",
    label: "Label",
    feature: "Feature",
    selectData: "Data",
    select: "Select",
    selectModel: "Select the model",
    environmentTraining: "Select the environment of the training task",
    environmentPrediction: "Select the environment of the prediction task",
    lowestNeed: "Lowest computing power need",
    longestTime: "Longest computing time",
    trainingResultReceivers: "Select result receivers of the training task",
    predictionResultReceivers: "Select result receivers of the prediction task",
    startTask: "Start Task",
    PSI: "Enable data alignment",
    pleaseComments: "Please enter comments (optional)",
    repeatAlgo: 'Duplicate algorithm nodes',
    exceedMaxNode: "Maximum number of nodes exceeded",
    reselectLater: "Please delete first and reselect later",
    pleaseCompleteStep: "Please complete the current step information",
    idColumnTips: "Used for multi-party data sample alignment",
    labelTips: "In supervised learning, the relationship between feature (x) and actual label (y) is found to predict y when x is provided.",
    featureTips: "In supervised learning, the relationship between feature (x) and actual label (y) is found to predict y when x is provided.",
    resultReceiverTips: "The result receiver is a trusted node used to store the calculation result file, and the node can provide users with the function of viewing / downloading the results later.",
    runSucceed: 'The task run successfully',
    runFailed: 'The task run failed',
    selectComputingProvider: 'Please select a computing provider',
    stepOneComputingTypeTitle: "Select the category of computing",
    pleaseSelectnNoPrivacyAlgorithm: "Please select a no privacy algorithm",
    pleaseSelectFeatureEngineeringAlgorithm: "Please select a feature engineering algorithm",
    pleaseSelectFeatureEngineeringInputData: "Select feature engineering input data",
    automaticAllocation: "Automatic Allocation",
    manualSelection: "Manual Selection",
    resultsModelTips: "The results of the training task will be used as the model for the prediction task"
  },
  myData: {
    tasksBriefInfoFirstParagraph: " ",
    tasksBriefInfoTwoParagraph: "effective data",
    dataName: "Data Name",
    dataProvider: "Data Provider",
    credentialName: "Credential Name",
    price: "Price",
    Trading: "15Day TradingVolume(LAT)",
    purchase: "Purchase",
    viewData: "View Data",
    viewCredential: "View Credential",
    basicInfo: "Basic Information",
    metadata: "Metadata",
    tasksInvolved: "Tasks Involved",
    credentialSymbol: "Credential symbol",
    launchTime: "Launch time",
    industryData: "Industry of data",
    dataFormat: "Data format",
    dataSize: "Data size",
    rowsData: "Rows of data",
    columnsData: "Columns of data",
    dataDescription: "Data description",
    field: "Field",
    dataType: "Data Type",
    remarks: "Remarks",
    taskID: "Task ID",
    TaskCategory: "Task Category",
    capability: "Capability",
    createTime: "Create Time",
    totalTime: "Total Time",
    marketPlaceholder: "Search token, data name",
    priceAsc: 'Price ascending ',
    priceDesc: 'Price descending',
    credentialPriceTips: "The price is for reference only. Please refer to the exchange for the real price",
    useScene: "Use Scenes",
    holdings: "Holdings",
    viewHoldingCredentials: "Holding Credentials",
    taskConsumption: 'Task Consumption',
    selectExchange: 'Select Exchange',
    dataOwner: 'Data Owner',
    tokenBalance: 'Token Balance',
  },
  workflow: {
    workflowName: "Workflow Name",
    workflowAlgorithm: "Workflow Algorithm",
    workflowSteps: "Workflow Steps",
    latestRunningTime: "Latest Running Time",
    creationTime: "Creation Time",
    viewRecords: "View Records",
    continueEditing: "Continue Edit",
    deleteWorkflow: "Delete",
    deleteWorkflowTips: "Please confirm whether to delete the workflow",
    operationRecord: "Operation Record",
    dataNotPerfect: "The current data is not perfect",
    WorkflowVersionName: "workflow Version Name",
    state: "state",
    timeUse: "Time Use",
    viewDetails: "View Details",
    authorizeBalance: 'Authorized quantity',
    placeholder: "Search workflow ID, name keyword",
    taskSteps: "Task Steps",
    viewTaskResults: "View Task Results",
    resultUrl: "Result address",
    taskCreationTime: "Task creation time",
    orgName: 'Organization Name',
    orgID: "Organization ID",
    fileUrl: 'File Path',
    copySuccess: "Copy successfully",
    startSuccess: "Start successfully",
    startWorkflow: "Start Workflow",
    consumption: "workflow will consume",
    plzInputTokenName: 'Please enter token or data name',
    modelEvaluationResult: 'Evaluation results',
    selectTokenOfData: 'Select the credentials required for the task',
    costPerTask: 'Consumption of a single task in private or non-private computing scenarios',
    selectCredentialForData: 'Please select consumed voucher for data',
    dataNotContainCredentials: 'The data does not contain the certificate, please go to the data market to purchase.'
  },
  credentials: {
    circulation: "Circulation",
    numberHolders: "Number of Holders",
    viewExplorer: "View on the blockchain explorer",
    presentPrice: "Present price",
    priceTrend: "Price Trend",
    volumeTrend: "Volume Trend",
    credentialExchangePool: "Credential Exchange Pool",
    total: 'Total',
    myShare: "My share"
  },
  computing: {
    privacyStatistics: "Privacy Statistics",
    privacyAIComputing: "Privacy AI Computing",
    privacyComputing: "Privacy Computing",
    nonPrivacyComputing: "Non-Privacy Computing",
    applicationScenarios: "Application Scenarios",
    learnNow: "Learn Now",
    chineseChessContent: "We implemented a set of Alpha Zero algorithms on the Datum network and applied them to Chinese chess.Its main purpose is to demonstrate how to access custom algorithms on the datum network to accomplish various tasks. Looking forward to your participation",
    privacy: "Privacy",
    nonPrivacy: "NonPrivacy",
  },
  computeTask: {
    taskId: "Task ID",
    taskCategory: "Task Category",
    startTime: "Start Time",
    totalTime: "Total Time",
    tasksBriefInfoTwoParagraph: "records of the privacy computing tasks",
    taskEvents: "Task Events",
    taskStartTime: "Task start time",
    computingStartTime: "Computing start time",
    taskEndTime: "End time",
    taskResult: "Task result",
    declaredComputingPowerRequired: "Declared computing power required",
    capacity: "Capacity",
    name: "Name",
    identifier: "Identifier",
    information: "Information",
    eventType: "Event type",
    eventMaker: "Event maker",
    generationTime: "Generation time",
    eventContent: "Event content",
    taskStatus: 'Task Status',
    placeholder: 'Search task ID',
    modelEvaluation: 'Model Evaluation',
    taskName: "Task name",
    characteristicEngineering: 'Characteristic Engineering'
  },
  expert: {
    overview: 'Overview',
    input: 'Input',
    output: 'Output',
    code: 'Code',
    environment: 'Environment',
    inputNameTips: 'Enter the workflow name',
    cannotModify: 'cannot be modified after submitting',
    noLimitType: 'no limit to character type',
    leastCharacter: '8 characters at least',
    mostCharacter: '64 characters at most',
    overviewTipForPanel: 'Please set the task name first, and then select the algorithm from the "Algorithm Library" on the left according to the running order.',
    author: 'Author',
    supportNum: 'Supported Data Collaborators',
    supportLang: 'Programming Languages',
    setAlgoEnv: 'Configure the algorithm environment:',
    minimumResource: 'Minimum computing resource requirements',
    longestComputingTime: 'Longest computing time',
    configureOutput: "Configure the algorithm output :",
    configureInput: "Configure the algorithm input :",
    saveNotes: 'Saved to the task initiator by default',
    storageForm: 'Storage Form',
    plaintext: 'PlainText',
    cipherText: 'CipherText',
    model: 'Model',
    selectModel: 'Select Model',
    viewResult: 'View Results',
    psiHint: 'If checked, the PSI operation will be performed to align the data before the current node task is executed.',
    labelRequired: 'labels（required)',
    labelOptionals: 'labels（optional)',
    deleteNode: 'Delete the node',
    algoVariable: 'Algorithm Variable',
    algoCode: 'Algorithm Code',
    frontModel: 'Front node output model',
    exceedPsiLimit: 'Limit of PSI nodes exceeded',
    saveHint: 'Please drag the algorithm combination workflow on the left and complete the input/output information.',
    saveInputHint: 'Please select the task initiator of the algorithm',
    saveInputParamsHint: 'Please complete the data provider information of the algorithm task',
    saveInputLabelHint: 'Please select a label column for the data provider',
    saveInputFeatureHint: 'Please select the feature column of the data provider',
    saveInputIDHint: 'Please select the ID column of the data provider',
    saveSuccessHint: 'Save the workflow successfully, jump to the workflow record page',
    saveStatusErrorHint: 'The current page state is incorrect and cannot be saved, please try again',
    saveEnvInputHint: 'Please complete the configuration of the algorithm environment',
    paramsHint: 'Better calculation results can be obtained by adjusting algorithm variables',
    saveOutputHint: 'Please select the algorithm output',
    randomModel: 'Random Mode',
    specifyMode: 'Specify Mode',
    compositeWorkflow: 'Drag the algorithm below to the middle area to combine the workflow you need',
    cleanNodeTips: 'You already have algorithm nodes in your workflow, switch the privacy type will clear the nodes of current workflow',
    exceedAlgLimit: 'Exceeds the maximum node limit of the current algorithm'
  },
  role: {
    taskSponsor: 'Task sponsor',
    algoProvider: 'Algorithm provider',
    resultConsumer: 'Result consumer',
    resultReceiver: 'Result consumer',
    dataProvider: 'Data provider',
    powerProvider: 'Power provider'
  },
  auth: {
    tokenAuth: 'Credential Authorization',
    nodeAuth: 'Node authorization',
    holdQuantity: "Hold Quantity",
    authQuantity: "Auth Quantity",
    authorizedQuantity: 'Authorized quantity',
    auth: "Authorize",
    cancelAuth: "Revoke",
    networkIP: "Network IP",
    networkName: "Network Name",
    quantityError: "The current quantity is incorrect",
    feeToken: "Fee Credential",
    dataToken: "Data Credential",
    plzInputAuthTokenNumber: 'Set authorized quantity',
    cancelTokenAuth: 'Cancel credential authorization',
    authStatus: 'Status',
    authorized: 'Authorized',
    unauthorized: 'Unauthorized',
    authorizeNode: 'Authorization node',
    cancelNodeAuth: 'Cancel node authorization',
    transactionReceipt: 'Transaction Receipt',
    transactionReject: 'Transaction Reject',
    authorizeToken: 'Authorize token',
    exceedTotal: 'Authorized amount exceeds holding amount',
    waitForConfirm: 'Waiting For Confirmation',
    waitWalletConfirm: 'Confirm this action in your wallet',
    confirmAuth: 'Confirm authorization',
    confirmCancelAuth: 'Confirm cancel authorization',
    authErc20Hint: 'User authorization is required when consuming data without attribute credentials, please select an authorized credential here.',
    authOrgHint: 'Workflow requires authorized agent nodes to coordinate tasks.',
    authWLatHint: 'The authorized WLat will be deducted as the handling fee of the workflow task.',
    setQty: 'Set quantity',
  },
  industry: {
    bank: 'Finance (bank)',
    insurance: 'Finance (Insurance)',
    securities: 'Finance (securities)',
    other: 'Finance (other)',
    iCT: "ICT",
    manufacturing: "Manufacturing",
    energy: "Energy industry",
    transportation: "Transportation Industry",
    medical: "Medical And Health Industry",
    publicService: "Public Service Industry",
    mediaAdvertise: "Media Advertising Industry",
    otherIndustry: "Other Industry",
  },
  status: {
    failed: 'failed',
    pending: 'pending',
    running: 'running',
    succeed: 'succeed',
  },
  exception: {
    error: 'Exception',
    unknown: 'Unknown Exception',
    "4001": 'User denied the action',
    "4100": 'Unauthorized: The requested method and/or account has not been authorized by the user.',
    "4200": 'Unsupported Method: The Provider does not support the requested method.',
    "4900": 'Disconnected: The Provider is disconnected from all chains.',
    "4901": 'Chain Disconnected: The Provider is not connected to the requested chain.',
    "-32700": "Parse error: Invalid JSON",
    "-32600": "Invalid request:	JSON is not a valid request object",
    "-32601": "Method not found: Method does not exist",
    "-32602": "Invalid params: Invalid method parameters",
    "-32603": "Internal error: Internal JSON-RPC error",
    "helpAddressNotFound": "Helper contract address not found",
    "ERCAddressNotFound": "Token contract address not found",
    "observerProxyAddressNotFound": "Proxy contract address not found",
    "plzInputWorkflowName": "Please enter a workflow name",
    "workflowLengthError": "Length should be 8 to 64"
  },
  center: {
    committeeProposal: 'Committee Proposal',
    trustedAuthentication: 'Trusted Authentication',
    committeeMembers: 'Committee Member',
    approvalOrganization: 'Approval Organization',
    certificateTime: 'Certificate Time',
    certificateValidity: 'Certificate Validity',
    proposalContent: 'Proposal content',
    proposer: 'Proposer',
    proposalType: 'Proposal Type',
    votingTime: 'Voting Time',
    proposalProgression: 'Progression',
    joinTime: 'Join Time',
    certificationDetails: "Certification Details", // Certification Details
    proposalDetails: "Proposal Details", //Proposal Details
    publicInfo: "Public Information", //Public information
    dataDesc: "Data Description", // Data description
    trustedDesc: 'The organizations listed below have been accredited by the Board and have received a Trusted Credential.',
    committeeDesc: 'It is composed of credible institutions and conducts credible certification of network participating organizations as needed.'
  }
}

export default en
