export default {
  common: {
    viewDetail: ' View details',
    back: 'Return',
    success: 'Succeeded',
    failed: 'Failed',
    sponsor: 'Sponsor',
    resultReceiver: 'Result receiver',
    executor: 'Computing executor',
    dataProvider: 'Data provider',
    algorithmProvider: 'Algorithm provider',
    cancel: 'Cancel',
    apply: 'Apply',
    name: 'Name',
    month: 'Month',
    dataGrowth: 'Growth',
    totalData: 'Total',
    cores: 'cores',
    actions: 'Actions',
    num: 'No.',
    delete: 'Delete',
    edit: 'Edit',
    copy: 'Copy',
    pause: 'Pause',
    restart: 'Restart',
    nickname: 'Nickname',
    actionSuccessFul: 'Action SuccessFul',
    actionFailed: 'Action Failed',
    choose: 'Choose',
    every: 'Every',
    minute: 'Minutes',
    yes: 'Yes',
    no: 'No',
    hours: 'Hours',
    rename: 'Rename',
    install: 'Install',
    extension: 'Extension',
    nodePort: 'Node Port',
    nodeIP: 'Node IP',
    connect: 'Connect',
    disconnect: 'Disconnect',
    more: 'More',
    add: 'Add',
    pleaseEnter: 'Please Enter'
  },
  step: {
    taskStarted: 'Task started',
    computationStarted: 'Computation started',
    computationSucceeded: 'Computation succeeded',
    computationFailed: 'Computation failed'
  },
  head: {
    connect: 'Connect',
    rosettaFlow: 'RosettaFlow',
    login: 'Log In RosettaFlow',
    logout: 'Log Out',
    myAccount: 'My Account',
    editNickname: 'Modify Nickname',
    walletAddress: 'Wallet Address',
    viewExplorer: 'View Explorer',
    nickPlaceholder: 'Please enter a nickname',
    nickValidateTips: 'The length is between 3 and 20 characters',
    copyStatusSuccess: 'Copy Succeeded',
    copyStatusFailed: 'Copy Failed',
    nodeManagement: 'Node Management',
    click: 'Click',
    nodeChange: 'to switch the network node, which will be the sponsor in the computing task',
    linkSuccess: 'Connection succeeded',
    linkFailed: 'Connection failure',
    linkConnection: 'Connectable nodes'
  },
  homepage: {
    dataExchange: 'Data Exchange & Collaborative Computing',
    bottomText: "Moirae is a new generation platform for data exchange and privacy AI computing. On the premise of keeping the data staying at the data provider's local storage, Moirae can help users quickly to trade data and one-stop train, evaluate, apply AI models.",
    rosettaTitle: 'Data Exchange Network',
    subtitle: 'enables data to flow like assets',
    multiServices: 'Multi-domain Application Services',
    recommendedServices: 'Recommended Cases',
    allServices: 'All Services',
    multiTips: 'RosettaFlow provides solutions for banking, insurance, government affairs, medical treatment, logistics and other industries.',
    amountTips: 'enables data to flow like assets',
    dataAmountTrent: 'Data Amount Trent of The Whole Network',
    bank: 'BANK',
    government: 'GOVERNMENT AFFAIRS',
    insurance: 'INSURANCE',
    medical: 'MEDICAL TREATMENT',
    logistics: 'LOGISTICS',
    searchPlacehold: 'Search from 100+ services',
    totalAmount: 'Total amount of the uploaded data in the RosettaNet',
    viewAllData: 'View all data',
    aiComputing: 'Private AI Computing Network',
    computationNodes: 'Computation nodes',
    totalMemory: 'Total memory',
    CPUCores: 'CPU cores',
    totalBandwidth: 'Total bandwidth',
    viewAllNodes: 'View all nodes',
    growth: 'growth',
    total: 'total',
    viewAllCases: 'View all cases'
  },
  menu: {
    home: 'Home',
    cases: 'Cases',
    projects: 'Projects',
    assets: 'Assets',
    assetsDetail: 'Asset Details',
    marketplace: 'Marketplace',
    nodes: 'Nodes',
    data: 'Data',
    documentation: 'Documentation',
    task: 'Task',
    algorithm: 'Algorithm',
    service: 'Services',
    subJob: 'SubJobs',
    workflowEdit: 'Workflow Edit'
  },
  node: {
    nodes: 'Nodes',
    participating: 'participating nodes in the whole network',
    desc: 'Participant nodes of sponsors, result receivers, data providers, algorithm providers, computing executors jointly provide support for secure multi-party computation through the scheduling service of the RosettaNet.',
    nodeName: 'Node name',
    searchNode: 'Search for nodes',
    sortByName: 'Sorted by: node name',
    sortByDataNum: 'Sorted by: number of data',
    sortByAlgoNum: 'Sorted by: number of algorithms',
    sortByActiveDegree: 'Sorted by: active degree',
    sortByComputePower: 'Sorted by: computing power',
    dataName: 'Data name',
    dataType: 'Data type',
    dataSize: 'Data size',
    publicTime: 'Time of publication',
    involvedNum: 'Number of tasks involved',
    taskName: 'Task name',
    taskType: 'Task type',
    capacity: 'Capacity',
    taskStartTime: 'Start time',
    taskSpent: 'Time spent',
    identifier: 'Identifier',
    memory: 'Memory',
    cpu: 'CPU',
    bandwidth: 'BandWidth',
    viewDetail: 'View details',
    viewMetaData: 'View metadata',
    baseInfo: 'Basic Information',
    fieldsInfo: 'Information of Fields',
    rowNum: 'Number of records (rows)：',
    colNum: 'Number of fields (columns)：',
    industry: 'Industry of data',
    remarks: 'Remarks',
    viewTask: 'View tasks of the data',
    taskResult: 'Result of task',
    viewEvent: 'View events',
    participantsInfo: 'Participants Information',
    eventType: 'Event type',
    eventMaker: 'Event maker',
    generationTime: 'Generation time',
    eventContent: 'Event content',
    computingResource: 'Occupied computing resources',
    metaNameAndId: 'Data name & Metadata ID',
    dataAmount: 'Number of data',
    dataTotalSize: 'Data size',
    taskInMonth: 'Number of tasks in 30 days',
    activeDegree: 'Active degree',
    dataDesc: 'Data description',
    deleteNodeTitle: 'Delete Node',
    addNodeTitle: 'Add New Node',
    deleteNodeTips: 'Are you sure to delete the node',
    connectNodeTitle: 'Connect new node',
    connectNodeTips: 'Confirm connection node'
  },
  data: {
    searchForData: 'Search for data',
    searchForAlgo: 'Search for algorithm',
    filter: 'Filters',
    authed: 'Authorized',
    applyAuth: 'Apply',
    applyForAuth: 'Apply for authorization',
    apply: 'Apply',
    byTime: 'By Time',
    byNumber: 'By number',
    permanent: 'Permanent',
    applied: 'Applied'
  },
  industry: {
    banking: 'Finance（Banking）',
    insurance: 'Finance（Insurance）',
    securities: 'Finance（Securities）',
    othersFinance: 'Finance（Others）',
    ICT: 'ICT',
    manufacturing: 'Manufacturing',
    energyIndustry: 'Energy industry',
    transportation: 'Transportation',
    healthcare: 'Healthcare',
    publicServices: 'Public services',
    mediaAdvertising: 'Media advertising',
    otherIndustries: 'Other industries'
  },
  roles: {
    taskSponsor: 'Task sponsor',
    algoProvider: 'Algorithm provider',
    resultConsumer: 'Result consumer',
    dataProvider: 'Data provider',
    powerProvider: 'Power provider'
  },
  tip: {
    plzInputTime: 'Please enter the authorization period',
    plzInputTimes: 'Please enter the number of authorization times',
    selectStartDate: 'Select Start Date',
    selectStartTime: 'Select start time',
    selectEndDate: 'Select end date',
    selectEndTime: 'Select end time',
    endTimeError: 'The end time must be greater than the start time',
    authSuccess: 'Authorization succeeded',
    authFailed: 'Authorization failed',
    deleteSuccess: 'Delete successful',
    deleteFailed: 'Delete failed',
    plzInputModel: 'Please select a model',
    plzInputDataSend: 'Please enter the data initiator',
    saveSucceeded: 'Saved successfully',
    saveFailed: 'Save failed',
    noNode: 'The workflow has not selected any nodes',
    inputModel: 'Please select a model for the workflow',
    plzWaitForSuccess: 'Please start the workflow and wait for the status to run successfully',
    userNoLogin: 'User not logged in',
    stopSucceeded: 'Stop the job successfully',
    stopFailed: 'Stop the job failed',
    nodeRunningNoDelete: 'The node is running and cannot be deleted',
    selectModel: 'Please select model',
    plzSelectSender: 'Please select task sender',
    plzFillInput: 'Please complete the input options and save them before operation'
  },
  assets: {
    assets: 'Assets',
    authType: 'Method',
    authValue: 'Value',
    owner: 'Owner',
    applicationTime: 'Application Time',
    status: 'Status',
    category: 'Category',
    author: 'Author',
    supportNum: 'Supported Number of Data Collaborators',
    supportLan: 'Supported Programming Languages',
    viewCode: 'View Code',
    revoke: 'Revoke',
    view: 'View',
    reApply: 'Reapply',
    statistics: 'Statistics',
    featureEngineering: 'Machine Learning',
    machineLearning: 'Machine Learning',
    codeDisplay: 'Code Display',
    algorithms: 'Algorithms',
    data: 'Data',
    confirmRevoke: 'Are you sure to revoke the application of',
    metadata: 'Metadata',
    authorization: 'Authorization',
    launchTime: 'Launch time',
    updateTime: 'Update time',
    format: 'Format',
    usedValue: 'Used value',
    field: 'Field'
  },
  cases: {
    blackListQuery: 'Blacklist Query',
    qualifiedInvestorCertification: 'Qualified Investor Certification',
    collaborativeMarketing: 'Collaborative Marketing',
    collaborativeScorecard: 'Collaborative Scorecard',
    blackListQueryDesc: 'Query the intersection of blacklists without disclosing the privacy data of all parties, based on the Private Set Intersection (PSI) technology. ',
    qualifiedInvestorCertificationDesc: 'Judge whether the user is a qualified investor using private weighted summation to calculate the balance range of the specific user among institutions.',
    collaborativeMarketingDesc: 'Predict whether users will purchase products or services, based on the private logistic regression algorithm to train a joint marketing model. ',
    collaborativeScorecardDesc: 'Calculate the joint credit score of the specific user by using the private logistic regression algorithm to train a score card model.',
    newProject: 'New Project',
    guidance: 'Guidance'
  },
  projects: {
    create: 'Create',
    creator: 'Creator',
    creationTime: 'Creation Time',
    searchProject: 'Search for projects',
    blank: 'Blank',
    selectTemplate: 'Select template',
    enterInfo: 'Enter information',
    desc: 'Description (optional)',
    createSuccess: 'Create Successful',
    createFailed: 'Create Failed',
    projectView: 'Project view',
    information: 'Information',
    workflows: 'Workflows',
    jobs: 'Jobs',
    participants: 'Participants',
    createFlow: 'New Workflow',
    createJob: 'New Job',
    createParticipants: 'New Participants',
    associatedWorkflow: 'Associated workflow',
    joinTime: 'Join Time',
    viewer: 'Viewer',
    editor: 'Editor',
    manager: 'Manager',
    addParticipant: 'Add Participant',
    deleteParticipant: 'Delete Participant',
    deleteProject: 'Delete Project',
    applying: 'Applying',
    cancelled: 'Cancelled',
    expired: 'Expired',
    refused: 'Refused',
    authorized: 'Authorized',
    deleteParticipantTip: 'Are you sure to delete the participant',
    deleteSuccessFul: 'Delete successFul',
    deleteFailed: 'Delete failed',
    editParticipants: 'Edit participants',
    addParticipants: 'Add participant',
    addSuccessFul: 'Add participant successFul',
    addFailed: 'Add participant failed',
    updateSuccessFul: 'Update successFul',
    updateFailed: 'Update failed',
    exportWorkFlow: 'Export a workflow(optional)',
    createFlowSuccessFul: 'Create workflow successFul',
    createFlowFailed: 'Create workflow failed',
    editFlow: 'Edit workflow',
    editFlowSuccessFul: 'Edit workflow successFul',
    editFlowFailed: 'Edit workflow failed',
    deleteWorkflow: 'Delete workflow',
    deleteWorkflowTip: 'Are you sure to delete the workflow',
    deleteWorkflowSuccessful: 'Delete workflow successFul',
    deleteWorkflowFailed: 'Delete workflow failed',
    stopWorkflowSuccessful: 'Stop workflow successFul',
    stopWorkflowFailed: 'Stop workflow failed',
    startWorkflowSuccessful: 'Start workflow successFul',
    startWorkflowFailed: 'Start workflow failed',
    selectUser: 'Select user',
    addJob: 'New Job',
    editJob: 'Edit Job',
    deleteJob: 'Delete Job',
    scheduling: 'Scheduling',
    nextStep: 'Next step',
    previous: 'Previous',
    startTime: 'Start Time',
    endTime: 'End Time',
    repeatRule: 'Repeat rule',
    duration: 'Duration',
    myAlgo: 'My Algorithms',
    save: 'Save',
    saveAs: 'Save As',
    start: 'Start',
    delete: 'Delete',
    newJob: 'New Job',
    viewResult: 'View Result',
    viewEvent: 'View Event',
    overview: 'Overview',
    input: 'Input',
    output: 'Output',
    code: 'Code',
    environment: 'Environment',
    author: 'Author',
    supportNum: 'Supported Number of Data Collaborators',
    supportLang: 'Supported Programming Languages',
    role: {
      initiator: 'Initiator',
      collaborators: 'Collaborators'
    },
    saveToCollaborators: 'Save To Data Collaborators',
    saveNotes: 'Saved to the data initiator by default ( Please select the task initiator on the input page and save it )',
    storageForm: 'Storage Form',
    Plaintext: 'Plaintext',
    computingPower: 'Computing Power (Minimum)',
    maxDuration: 'Max Duration',
    model: 'Model',
    sameNodeTip: 'The same node cannot be added repeatedly',
    maxNodeTip: 'Maximum node limit exceeded',
    overflowTip: 'Select the algorithms from the left “My Algorithms” according to the running order.',
    columns: 'columns',
    labelRequired: 'labels（required)',
    labelOptional: 'labels（optional)',
    features: 'features',
    runningLog: 'Running Log',
    add: 'Add',
    end: 'End',
    runningResult: 'Results',
    download: 'Download',
    preNodeResult: 'Previous node output model',
    confirmDeleteWorkflow: 'Clear current workflow',
    deleteWorkFlow: 'Delete Workflow',
    editProject: 'Edit project',
    records: 'Records'
  },
  status: {
    noBegun: 'No Begun',
    running: 'Running',
    runSuccessfully: 'Successfully',
    runFailed: 'Failed',
    pending: 'Pending'
  },
  rules: {
    projectNewProject: 'Please enter name',
    projectSelect: 'Please select',
    projectNewProjectNameLength: 'The length is between 3 and 30 characters'
  },
  wallet: {
    tip1: 'One-click blockchain application',
    tip2: 'Privacy Preserved Locally',
    unlockTheWallet: 'Please unlock Metamask wallet first'
  },
  result: {
    port: 'Port',
    fileName: 'File name',
    filePath: 'File path：',
    metadataId: 'Metadata ID',
    orgId: ' Organization ID',
    orgName: ' Organization Name'
  }
}